{"version":3,"sources":["../../../src/elements/base/draggable.js"],"names":["React","require","shallowCompare","DraggableBase","props","lastTransformation","x","y","isDragging","state","transform","handleMouseDown","bind","handleMouseMove","handleMouseUp","draggableProps","draggable","onMouseDown","onMouseMove","onMouseUp","style","cursor","nextProps","nextState","e","clickPosition","pageX","pageY","targetBaseWidth","targetRealWidth","target","width","baseVal","value","getBoundingClientRect","multiplier","parseFloat","toFixed","xDiff","yDiff","setState","match","split","parseInt","Component","module","exports"],"mappings":"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","file":"draggable.js","sourcesContent":["const React = require('react');\nconst shallowCompare = require('react-addons-shallow-compare');\n\nclass DraggableBase extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.lastTransformation = {\n      x: 0,\n      y: 0\n    };\n    this.isDragging = false;\n\n    this.state = {\n      transform: 'matrix(1 0 0 1 0 0)'\n    };\n\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleMouseUp = this.handleMouseUp.bind(this);\n\n    this.draggableProps = {};\n    if(this.props.draggable) {\n      this.draggableProps = {\n        onMouseDown: this.handleMouseDown,\n        onMouseMove: this.handleMouseMove,\n        onMouseUp: this.handleMouseUp,\n        style: {\n          cursor: 'move'\n        },\n        transform: this.state.transform\n      };\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return shallowCompare(this, nextProps, nextState);\n  }\n\n  handleMouseDown(e) {\n    this.isDragging = true;\n    this.clickPosition = {\n      x: e.pageX,\n      y: e.pageY\n    }\n  }\n\n  handleMouseMove(e) {\n    if(false !== this.isDragging) {\n      let targetBaseWidth,\n          targetRealWidth;\n\n      try {\n        targetBaseWidth = e.target.width.baseVal.value;\n        targetRealWidth = e.target.getBoundingClientRect().width;\n      } catch(e) {\n        targetBaseWidth = 1;\n        targetRealWidth = 1;\n      }\n\n      const multiplier = parseFloat((targetBaseWidth / targetRealWidth).toFixed(2));\n      const xDiff = ((e.pageX - this.clickPosition.x) * multiplier) + this.lastTransformation.x;\n      const yDiff = ((e.pageY - this.clickPosition.y) * multiplier) + this.lastTransformation.y;\n\n      this.setState({\n        transform: 'matrix(1 0 0 1 ' + xDiff + ' ' + yDiff + ')'\n      });\n    }\n  }\n\n  handleMouseUp(e) { \n    this.isDragging = false;\n    const transform = this.state.transform.match(/matrix\\(1 0 0 1 (.*?)\\)/)[1].split(' ');\n\n    this.lastTransformation = {\n      x: parseInt(transform[0]),\n      y: parseInt(transform[1])\n    };\n  }\n\n  componentDidUpdate() {\n    if(this.props.draggable) {\n      this.draggableProps.transform = this.state.transform;\n    }\n  }\n\n}\n\nmodule.exports = DraggableBase;"]}