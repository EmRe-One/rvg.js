{"version":3,"sources":["../../src/elements/text.js"],"names":["util","require","React","DraggableBase","String","prototype","addSmartQuotes","replace","Text","props","x","y","fill","fontSize","fontFamily","textAnchor","smartQuotes","text","children","lineHeight","isArray","map","string","index","draggableProps","propTypes","PropTypes","any","isRequired","number","defaultProps","module","exports"],"mappings":"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","file":"text.js","sourcesContent":["const util = require('util');\nconst React = require('react');\n\nconst DraggableBase = require('./base/draggable');\n\nString.prototype.addSmartQuotes = function() {\n  return this.replace(/(\\W|^)\"(\\S)/g, '$1\\u201c$2') // beginning \"\n             .replace(/(\\u201c[^\"]*)\"([^\"]*$|[^\\u201c\"]*\\u201c)/g, '$1\\u201d$2') // ending \"\n             .replace(/([^0-9])\"/g,'$1\\u201d') // remaining \" at end of word\n             .replace(/(\\W|^)'(\\S)/g, '$1\\u2018$2') // beginning '\n             .replace(/([a-z])'([a-z])/ig, '$1\\u2019$2') // conjunction's possession\n             .replace(/((\\u2018[^']*)|[a-z])'([^0-9]|$)/ig, '$1\\u2019$3') // ending '\n             .replace(/(\\u2018)([0-9]{2}[^\\u2019]*)(\\u2018([^0-9]|$)|$|\\u2019[a-z])/ig, '\\u2019$2$3') // abbrev. years like '93\n             .replace(/(\\B|^)\\u2018(?=([^\\u2019]*\\u2019\\b)*([^\\u2019\\u2018]*\\W[\\u2019\\u2018]\\b|[^\\u2019\\u2018]*$))/ig, '$1\\u2019') // backwards apostrophe\n             .replace(/'''/g, '\\u2034') // triple prime\n             .replace(/(\"|'')/g, '\\u2033') // double prime\n             .replace(/'/g, '\\u2032'); // prime\n}\n\nclass Text extends DraggableBase {\n\n  render() {\n    const {\n      x, y,\n      fill,\n      fontSize, fontFamily,\n      textAnchor, smartQuotes\n    } = this.props;\n    \n    let text = this.props.children;\n\n    let lineHeight = this.props.lineHeight || fontSize;\n\n    if(util.isArray(text)) {\n      text = text.map((string, index) => {\n        if(true === smartQuotes) {\n          string = string.addSmartQuotes();\n        }\n\n        return (<tspan key={index} x={x} y={(lineHeight * index) + y} alignmentBaseline=\"before-edge\">{string}</tspan>);\n      });\n    } else {\n      if(true === smartQuotes) {\n        text = text.addSmartQuotes();\n      }\n    }\n\n    return (\n      <text x={x}\n            y={y}\n            fill={fill}\n            textAnchor={textAnchor}\n            fontSize={fontSize}\n            fontFamily={fontFamily}\n            {...this.draggableProps}>\n        {text}\n      </text>\n    );\n  }\n\n}\n\n// Prop types\nText.propTypes = {\n  x: React.PropTypes.any.isRequired,\n  y: React.PropTypes.any.isRequired,\n  fill: React.PropTypes.string.isRequired,\n  fontSize: React.PropTypes.number,\n  fontFamily: React.PropTypes.string,\n  textAnchor: React.PropTypes.string\n};\n\nText.defaultProps = {\n  x: 0,\n  y: 0,\n  fill: '#000',\n  fontSize: 20,\n  fontFamily: 'serif',\n  textAnchor: 'start'\n}\n\nmodule.exports = Text;"]}